* Minor Settings
** gui fix
  #+begin_src emacs-lisp
    (setq scroll-conservatively 100)

    (setq ring-bell-function 'ignore)

    (when window-system (global-hl-line-mode t))

    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)

    (setq inhibit-startup-message t)

    (defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src
** electric
   #+begin_src emacs-lisp
     (setq electric-pair-pairs '(
				 (?\( . ?\))
				 (?\[ . ?\])
				 ))

     (electric-pair-mode t)

     ; Disable for <>

     (setq electric-pair-inhibit-predicate
	   (lambda (c)
	     (if (char-equal c ?\<) t (electric-pair-default-inhibit c))))
   #+end_src
** kill ring
   #+begin_src emacs-lisp
     (use-package popup-kill-ring
       :ensure t
       :bind ("M-y" . popup-kill-ring))
   #+end_src
** custom file
   #+begin_src emacs-lisp
     (setq custom-file "~/.emacs.d/custom-em.el")
     (load custom-file 'noerror)
   #+end_src
* Theme
  #+begin_src emacs-lisp
    (set-face-attribute 'default nil :family "Fira Code Retina" :height 160)
  #+end_src
* Org
** config
   #+begin_src emacs-lisp
     (setq org-src-window-setup 'current-window)
   #+end_src
** Org Bullets
   #+begin_src emacs-lisp
     ;(use-package org-bullets
     ;  :ensure t
     ;  :config
     ;  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+end_src
* IDO
** enable ido mode
   #+begin_src emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+end_src
** ido vertical
   #+begin_src emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-vertical-mode 1))
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)
   #+end_src
** smex
   #+begin_src emacs-lisp
     (use-package smex
       :ensure t
       :init (smex-initialize)
       :bind
       ("M-x" . smex))
   #+end_src
** switch buffer
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
   #+end_src
* Which Key
  #+begin_src emacs-lisp
    (use-package which-key
      :ensure t
      :init
      (which-key-mode))
  #+end_src
* Beacon
  #+begin_src emacs-lisp
    (use-package beacon
      :ensure t
      :init
      (beacon-mode 1))



  #+end_src
* Buffers
** always kill buffer
   #+begin_src emacs-lisp
     (defun kill-curr-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))
       (global-set-key (kbd "C-x k") 'kill-curr-buffer)
   #+end_src
** enable ibuffer
   #+begin_src emacs-lisp 
     (global-set-key (kbd "C-x b") 'ibuffer)
   #+end_src
** expert
   #+begin_src emacs-lisp
     (setq ibuffer-expert t)
   #+end_src
* Avy
  #+begin_src emacs-lisp
    (use-package avy
      :ensure t
      :bind
      ("M-s" . avy-goto-char))
  #+end_src
* Config Edit/Reload
** edit
   #+begin_src emacs-lisp
     (defun config-visit ()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+end_src
** reload
   #+begin_src emacs-lisp
     (defun config-reload ()
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
     (global-set-key (kbd "C-c r") 'config-reload)
   #+end_src
* Rainbow
  #+begin_src emacs-lisp
    (use-package rainbow-mode
      :ensure t
      :init (rainbow-mode 1))
  #+end_src
* Switch Window
  #+begin_src emacs-lisp
    (use-package switch-window
      :ensure t
      :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
	    '("a" "s" "d" "f" "h" "j" "k" "l"))
      :bind
      ([remap other-window] . switch-window))
  #+end_src
* Window Splitting
  #+begin_src emacs-lisp
    (defun split-and-follow-horizontally ()
      (interactive)
      (split-window-below)
      (balance-windows)
      (other-window 1))
    (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

    (defun split-and-follow-vertically ()
      (interactive)
      (split-window-right)
      (balance-windows)
      (other-window 1))
    (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  #+end_src
* Functions
** kill word
   #+begin_src emacs-lisp
     (defun kill-whole-word ()
       (interactive)
       (backward-word)
       (kill-word 1))
     (global-set-key (kbd "C-c w w") 'kill-whole-word)
   #+end_src
* Hungry Delete
  #+begin_src emacs-lisp
    (use-package hungry-delete
      :ensure t
      :config (global-hungry-delete-mode))
  #+end_src
* Rainbow
  #+begin_src emacs-lisp
    (use-package rainbow-mode
      :ensure t
      :init (add-hook 'prog-mode-hook 'rainbow-mode))
  #+end_src
** rainbow delimiters
  #+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :init
      (rainbow-delimiters-mode 1))
  #+end_src
* Dashboard
  #+begin_src emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '((recents . 10))))
  #+end_src
* Auto Completion
  #+begin_src emacs-lisp
    (use-package company
      :ensure t
      :init
      (add-hook 'after-init-hook 'global-company-mode))
  #+end_src
* Mark Multiple
  #+begin_src emacs-lisp
    (use-package mark-multiple
      :ensure t
      :bind ("C-c q" . 'mark-next-like-this))
  #+end_src
* Expand Region
  #+begin_src emacs-lisp
    (use-package expand-region
      :ensure t
      :bind ("C-q" . er/expand-region))
  #+end_src
* Keybinds
C-x 3 split horizontally
C-x 2 split vertically
C-c w w kill word
C-x b ibuffer
